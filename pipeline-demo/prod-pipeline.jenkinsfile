pipeline {
    agent { label 'devops' }

    environment {
        REPO_URL = 'https://github.com/nick-mathison/my-database-changes.git'
        DCT_CLI = '/root/dct-toolkit'
        MASKING_JOB_ID= '161f50bf-9521-4129-9dd5-c0c1a99165bc'
        LB_CLI = 'liquibase'
        DB_URL = 'jdbc:postgresql://10.160.1.29:5432/delphixdb'
        DB_USER = 'delphix'
        DB_PASS = 'delphix'
        CHANGE_FILE = 'my-database-changes.sql'
        SLACK_WEBHOOK = credentials('slack-webhook')
    }
    

    stages {
    
    def testPassed

        stage('Checkout Database Changes') {
            steps {
                git branch: 'main', url: "${REPO_URL}"
            }
        }

        stage('Update PROD with Liquibase') {
            steps {
                sh """
                ${LB_CLI} \
                  --url=${DB_URL} \
                  --username=${DB_USER} --password=${DB_PASS} \
                  --changeLogFile=${CHANGE_FILE} \
                  update
                """
            }
        }

        stage('Run Sanity Tests') {
            steps {
                script {
                    echo "Running dummy sanity tests..."
                    testPassed = new Random().nextBoolean()
                }
            }
        }

        stage('Conditional Create New Masked Snapshot or Rollback') {
            parallel {
                stage('Create new Masked Snapshot') {
                   when {
                        expression { return testPassed }
                    } 
                    stages {
                        stage('Snapshot PROD') {
                            steps {
                                echo "Sanity tests passed, triggering Delphix snapshot..."

                                sh """
                                ${DCT_CLI} snapshot_dsource dsource_id=Postgres_master
                                """
                            }
                        }
                        stage('Refresh MASK VDB from PROD') {
                            steps {
                                sh """
                                ${DCT_CLI} refresh_vdb vdb_id=Postgres_MASK
                                """
                            }
                        }
                        stage('Mask MASK VDB ') {
                            steps {
                                sh """
                                ${DCT_CLI} execute_masking_job masking_job_id=$MASKING_JOB_ID
                                """
                            }
                        }
                        stage('Snapshot MASK VDB') {
                            steps {
                                sh """
                                ${DCT_CLI} snapshot_vdb vdb_id=Postgres_MASK
                                """
                            }
                        }
                    }
                }
                stage('Rollback PROD Changes') {
                   when {
                        expression { return !testPassed }
                    } 
                    stages {
                        stage('Rollback') {
                            steps {
                                echo "Sanity tests failed, performing Liquibase rollback..."

                                sh """
                                ${LB_CLI} \
                                --url=${DB_URL} \
                                --username=${DB_USER} --password=${DB_PASS} \
                                --changeLogFile=${CHANGE_FILE} \
                                rollback-one-update --force
                                """

                                error("Rolled back PROD successfully.")
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                slackNotify(":white_check_mark: Production DB update *SUCCEEDED* and *Postgres_MASK* snapshot created from *Postgres_PROD*.")
            }
        }
        failure {
            script {
                slackNotify(":x: Production DB update *FAILED*. Rollback attempted on *Postgres_PROD*.")
            }
        }
    }
}

def slackNotify(String message) {
    sh """
    curl -X POST -H 'Content-type: application/json' \
         --data '{"text": "${message}"}' ${SLACK_WEBHOOK}
    """
}